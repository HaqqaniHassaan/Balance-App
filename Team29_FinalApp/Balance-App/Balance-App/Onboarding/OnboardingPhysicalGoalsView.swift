import SwiftUIstruct OnboardingPhysicalGoalsView: View {    @ObservedObject var coreDataViewModel: CoreDataViewModel    // State to track navigation    @State private var navigateToMentalHealth = false    var body: some View {        VStack(spacing: 20) {            // Title with drop shadow            Text("Select Your Physical Goals")                .font(.title)                .fontWeight(.bold)                .padding(.top, 100)                .foregroundColor(.white)                .shadow(color: .black.opacity(0.8), radius: 1, x: 0, y: 1)            // Individual Toggle Rows            VStack(spacing: 10) {                if let fitnessEntity = coreDataViewModel.fitnessEntity {                    goalToggle("Track Workouts", isOn: Binding(                        get: { fitnessEntity.isWorkoutTracked },                        set: { coreDataViewModel.updateFitnessGoal(for: \.isWorkoutTracked, value: $0) }                    ))                                        goalToggle("Track Calories", isOn: Binding(                        get: { fitnessEntity.isCaloriesTracked },                        set: { coreDataViewModel.updateFitnessGoal(for: \.isCaloriesTracked, value: $0) }                    ))                                        goalToggle("Track Steps", isOn: Binding(                        get: { fitnessEntity.isStepsTracked },                        set: { coreDataViewModel.updateFitnessGoal(for: \.isStepsTracked, value: $0) }                    ))                                        goalToggle("Track Stretching", isOn: Binding(                        get: { fitnessEntity.isStretchingTracked },                        set: { coreDataViewModel.updateFitnessGoal(for: \.isStretchingTracked, value: $0) }                    ))                                        goalToggle("Track Water Intake", isOn: Binding(                        get: { fitnessEntity.isWaterTracked },                        set: { coreDataViewModel.updateFitnessGoal(for: \.isWaterTracked, value: $0) }                    ))                } else {                    Text("Loading fitness goals...")                        .foregroundColor(.white)                        .shadow(color: .black.opacity(0.8), radius: 1, x: 0, y: 1)                }            }            .padding(.horizontal)            Spacer()            // Next Button            Button(action: {                navigateToMentalHealth = true            }) {                Text("Next")                    .font(.headline)                    .foregroundColor(.white)                    .padding()                    .frame(maxWidth: .infinity)                    .background(Color.red)                    .cornerRadius(15)                    .padding(.horizontal, 20)                    .shadow(color: .black.opacity(0.8), radius: 1, x: 0, y: 1)            }            .navigationDestination(isPresented: $navigateToMentalHealth) {                OnboardingMentalHealthGoalsView(coreDataViewModel: coreDataViewModel)            }            Spacer()        }        .padding()        .background(            Image("background_image")                .resizable()                .scaledToFill()                .edgesIgnoringSafeArea(.all)        )    }    // Helper for individual toggle rows    private func goalToggle(_ title: String, isOn: Binding<Bool>) -> some View {        Toggle(isOn: isOn) {            Text(title)                .foregroundColor(.white)                .shadow(color: .black.opacity(0.8), radius: 1, x: 0, y: 1)        }        .padding()        .frame(maxWidth: .infinity)        .background(Color.white.opacity(0.2)) // Transparent background for each toggle        .cornerRadius(10)    }}#Preview {    NavigationStack {        OnboardingPhysicalGoalsView(coreDataViewModel: CoreDataViewModel())    }}