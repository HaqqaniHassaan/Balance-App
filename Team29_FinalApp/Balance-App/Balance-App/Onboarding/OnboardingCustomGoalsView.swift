import SwiftUIstruct OnboardingCustomGoalsView: View {    @ObservedObject var coreDataViewModel: CoreDataViewModel    // State to track navigation    @State private var navigateToContentView = false    @State private var newGoalText: String = "" // Text field input for a new goal    @State private var newGoalTarget: String = "" // Text field input for target value    @State private var customGoals: [Goal] = [] // List of custom goals from Core Data    var body: some View {        NavigationStack {            VStack(spacing: 20) {                // Header Text                Text("Set Your Custom Goals")                    .font(.largeTitle)                    .fontWeight(.bold)                    .padding(.top, 50)                    .foregroundColor(.white)                    .shadow(color: .black.opacity(0.8), radius: 1, x: 0, y: 1)                // New Goal Input                VStack(spacing: 10) {                    HStack {                        TextField("Enter new goal...", text: $newGoalText)                            .padding()                            .background(Color.white.opacity(0.3))                            .cornerRadius(10)                            .foregroundColor(.white)                            .shadow(color: .black.opacity(0.4), radius: 1, x: 0, y: 1)                        TextField("Target", text: $newGoalTarget)                            .keyboardType(.numberPad)                            .padding()                            .background(Color.white.opacity(0.3))                            .cornerRadius(10)                            .foregroundColor(.white)                            .frame(width: 100)                            .shadow(color: .black.opacity(0.4), radius: 1, x: 0, y: 1)                        // Add Goal Button                        Button(action: addGoal) {                            Image(systemName: "plus.circle.fill")                                .resizable()                                .frame(width: 40, height: 40)                                .foregroundColor(.cyan)                        }                        .padding(.leading, 5)                    }                    .padding(.horizontal)                }                // List of Custom Goals                ScrollView {                    VStack(spacing: 10) {                        ForEach(customGoals, id: \.self) { goal in                            customGoalRow(goal)                        }                    }                    .padding(.horizontal)                }                Spacer()                // Finish Button                Button(action: {                    coreDataViewModel.completeOnboarding() // Mark onboarding as complete                    navigateToContentView = true // Navigate to main content                }) {                    Text("Finish")                        .font(.headline)                        .foregroundColor(.white)                        .padding()                        .frame(maxWidth: .infinity)                        .background(Color.purple)                        .cornerRadius(15)                        .padding(.horizontal, 20)                        .shadow(color: .black.opacity(0.8), radius: 1, x: 0, y: 1)                }                .fullScreenCover(isPresented: $navigateToContentView) {                    ContentView(coreDataViewModel: coreDataViewModel) // Pass the existing CoreDataViewModel                }                Spacer()            }            .padding()            .background(                Image("background_image")                    .resizable()                    .scaledToFill()                    .edgesIgnoringSafeArea(.all)            )            .onAppear {                // Load saved custom goals                loadCustomGoals()            }        }    }    // Helper function to add a new custom goal    private func addGoal() {        guard !newGoalText.isEmpty, let target = Int64(newGoalTarget), target > 0 else { return }        coreDataViewModel.addCustomGoal(name: newGoalText, target: target)        newGoalText = ""        newGoalTarget = ""        loadCustomGoals() // Refresh the list of goals    }    // Helper function to load custom goals from Core Data    private func loadCustomGoals() {        customGoals = coreDataViewModel.fetchCustomGoals()    }    // Helper function for individual custom goal rows    private func customGoalRow(_ goal: Goal) -> some View {        HStack {            VStack(alignment: .leading) {                Text(goal.name ?? "Unnamed Goal")                    .foregroundColor(.white)                    .font(.headline)                    .shadow(color: .black.opacity(0.8), radius: 1, x: 0, y: 1)                Text("Target: \(goal.target) | Progress: \(goal.progress)")                    .foregroundColor(.white)                    .font(.caption)                    .shadow(color: .black.opacity(0.8), radius: 1, x: 0, y: 1)            }            Spacer()            // Edit/Delete buttons            HStack(spacing: 10) {                Button(action: {                    // Future functionality for editing the goal                }) {                    Image(systemName: "pencil.circle.fill")                        .resizable()                        .frame(width: 30, height: 30)                        .foregroundColor(.cyan)                }                Button(action: {                    coreDataViewModel.deleteGoal(goal)                    loadCustomGoals() // Refresh the list of goals                }) {                    Image(systemName: "minus.circle.fill")                        .resizable()                        .frame(width: 30, height: 30)                        .foregroundColor(.red)                }            }        }        .padding()        .frame(maxWidth: .infinity)        .background(Color.white.opacity(0.2))        .cornerRadius(10)    }}#Preview {    OnboardingCustomGoalsView(coreDataViewModel: CoreDataViewModel())}